# -*- coding: utf-8 -*-
"""Untitled10.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DuTuKJLzZjCNojXi36YMXo8mTTAisc42
"""

import pandas as pd
import numpy as np
import streamlit as st
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import matplotlib.pyplot as plt
import seaborn as sns

# Set page configuration
st.set_page_config(
    page_title="Maternal and Child Health Dashboard",
    page_icon="ðŸ‘¶",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Load data
@st.cache_data
def load_data():
    df = pd.read_csv('data6.csv')

    # Data cleaning and preprocessing
    # Replace placeholder values with NaN
    df.replace([999, 1000, '999', '1000'], np.nan, inplace=True)

    # Convert categorical variables to proper categories
    categorical_cols = [
        'Residence', 'Educational_attainment', 'Smokes_cigarettes',
        'Medical_Permission', 'Medical_Money', 'Hospital_Distance',
        'Currently_Working', 'Occupation', 'Wealth_index',
        'Worked_Last_12months', 'Employment_type', 'Expenditure_DecisionMaker',
        'Type_of_earnings', 'Delivery_Place', 'Given_IronTablets',
        'Maternal_Dewormer', 'Has_HealthCard', 'Pregnancy_Wanted',
        'Birth_CS', 'BW_recall', 'target'
    ]

    for col in categorical_cols:
        if col in df.columns:
            df[col] = df[col].astype('category')

    # Convert target to binary (if it's not already)
    if 'target' in df.columns:
        df['target'] = df['target'].astype(int)

    return df

df = load_data()

# Sidebar
st.sidebar.title("Filters")
st.sidebar.markdown("Use these filters to explore the data:")

# Residence filter
residence_options = ['All'] + list(df['Residence'].unique())
selected_residence = st.sidebar.selectbox('Residence', residence_options)

# Education filter
education_options = ['All'] + list(df['Educational_attainment'].unique())
selected_education = st.sidebar.selectbox('Educational Attainment', education_options)

# Wealth index filter
wealth_options = ['All'] + list(df['Wealth_index'].unique())
selected_wealth = st.sidebar.selectbox('Wealth Index', wealth_options)

# Apply filters
filtered_df = df.copy()
if selected_residence != 'All':
    filtered_df = filtered_df[filtered_df['Residence'] == selected_residence]
if selected_education != 'All':
    filtered_df = filtered_df[filtered_df['Educational_attainment'] == selected_education]
if selected_wealth != 'All':
    filtered_df = filtered_df[filtered_df['Wealth_index'] == selected_wealth]

# Main content
st.title("ðŸ‘¶ Maternal and Child Health Dashboard")
st.markdown("Explore relationships between maternal factors and child health outcomes")

# Key metrics
col1, col2, col3, col4 = st.columns(4)

with col1:
    st.metric("Total Records", len(filtered_df))
with col2:
    low_bw_percentage = (filtered_df['target'].mean() * 100) if 'target' in filtered_df.columns else 0
    st.metric("Low Birth Weight %", f"{low_bw_percentage:.1f}%")
with col3:
    avg_age = filtered_df['Mother_Age'].mean()
    st.metric("Average Mother Age", f"{avg_age:.1f} years")
with col4:
    avg_anc = filtered_df['ANC_Visits'].mean()
    st.metric("Average ANC Visits", f"{avg_anc:.1f}")

# Tabs for different visualizations
tab1, tab2, tab3, tab4, tab5 = st.tabs([
    "Demographics",
    "Health Indicators",
    "Pregnancy & Birth",
    "Correlations",
    "Raw Data"
])

with tab1:
    st.header("Demographic Characteristics")

    col1, col2 = st.columns(2)

    with col1:
        # Education distribution
        fig_edu = px.pie(
            filtered_df,
            names='Educational_attainment',
            title='Educational Attainment Distribution'
        )
        st.plotly_chart(fig_edu, use_container_width=True)

    with col2:
        # Residence distribution
        fig_res = px.pie(
            filtered_df,
            names='Residence',
            title='Residence Distribution'
        )
        st.plotly_chart(fig_res, use_container_width=True)

    # Wealth index distribution
    fig_wealth = px.histogram(
        filtered_df,
        x='Wealth_index',
        title='Wealth Index Distribution',
        color='Wealth_index'
    )
    st.plotly_chart(fig_wealth, use_container_width=True)

with tab2:
    st.header("Health Indicators")

    col1, col2 = st.columns(2)

    with col1:
        # Mother's BMI
        filtered_df['BMI'] = filtered_df['Mother_weight'] / ((filtered_df['Mother_height']/100) ** 2)
        fig_bmi = px.histogram(
            filtered_df,
            x='BMI',
            nbins=20,
            title="Mother's BMI Distribution",
            color='target'
        )
        st.plotly_chart(fig_bmi, use_container_width=True)

    with col2:
        # Smoking status
        fig_smoke = px.pie(
            filtered_df,
            names='Smokes_cigarettes',
            title='Smoking Status Distribution'
        )
        st.plotly_chart(fig_smoke, use_container_width=True)

    # ANC visits by education
    fig_anc_edu = px.box(
        filtered_df,
        x='Educational_attainment',
        y='ANC_Visits',
        title='ANC Visits by Education Level',
        color='Educational_attainment'
    )
    st.plotly_chart(fig_anc_edu, use_container_width=True)

with tab3:
    st.header("Pregnancy and Birth Outcomes")

    col1, col2 = st.columns(2)

    with col1:
        # Birth delivery place
        fig_delivery = px.pie(
            filtered_df,
            names='Delivery_Place',
            title='Delivery Place Distribution'
        )
        st.plotly_chart(fig_delivery, use_container_width=True)

    with col2:
        # C-section rate by wealth index
        csection_rates = filtered_df.groupby('Wealth_index')['Birth_CS'].apply(
            lambda x: (x == 'Yes').mean() * 100
        ).reset_index()
        fig_cs = px.bar(
            csection_rates,
            x='Wealth_index',
            y='Birth_CS',
            title='C-Section Rate by Wealth Index (%)',
            color='Wealth_index'
        )
        st.plotly_chart(fig_cs, use_container_width=True)

    # Low birth weight by factors
    fig_lbw_edu = px.box(
        filtered_df,
        x='Educational_attainment',
        y='target',
        title='Low Birth Weight by Education Level',
        color='Educational_attainment'
    )
    st.plotly_chart(fig_lbw_edu, use_container_width=True)

with tab4:
    st.header("Correlation Analysis")

    # Select numerical columns for correlation
    numerical_cols = ['Mother_weight', 'Mother_height', 'Mother_Age', 'ANC_Visits', 'Days_Tablets_taken']
    numerical_cols = [col for col in numerical_cols if col in filtered_df.columns]

    if numerical_cols:
        corr_matrix = filtered_df[numerical_cols].corr()

        fig_corr = px.imshow(
            corr_matrix,
            title='Correlation Matrix of Numerical Variables',
            aspect='auto',
            color_continuous_scale='RdBu_r'
        )
        st.plotly_chart(fig_corr, use_container_width=True)

    # Scatter plot: Mother's age vs ANC visits colored by target
    if 'Mother_Age' in filtered_df.columns and 'ANC_Visits' in filtered_df.columns:
        fig_scatter = px.scatter(
            filtered_df,
            x='Mother_Age',
            y='ANC_Visits',
            color='target',
            title='Mother Age vs ANC Visits (Colored by Birth Weight Outcome)',
            hover_data=['Educational_attainment', 'Wealth_index']
        )
        st.plotly_chart(fig_scatter, use_container_width=True)

with tab5:
    st.header("Raw Data")
    st.dataframe(filtered_df)

    # Download button
    csv = filtered_df.to_csv(index=False)
    st.download_button(
        label="Download filtered data as CSV",
        data=csv,
        file_name="filtered_maternal_data.csv",
        mime="text/csv"
    )

# Footer
st.markdown("---")
st.markdown("### Data Source: Maternal and Child Health Survey")
st.markdown("This dashboard provides insights into factors affecting maternal and child health outcomes.")